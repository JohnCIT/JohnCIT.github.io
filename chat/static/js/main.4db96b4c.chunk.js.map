{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","SignIn","onClick","provider","GoogleAuthProvider","signInWithPopup","ChatRoom","messageRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","dummy","createRef","sendMessage","e","a","preventDefault","currentUser","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","ChatMessage","message","id","ref","onSubmit","value","onChange","target","type","props","messageClass","className","src","SignOut","signOut","App","useAuthState","user","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRAYAA,IAASC,cAAc,CACnBC,OAAQ,0CACRC,WAAY,iCACZC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGnB,IAAMC,EAAOT,IAASS,OAChBC,EAAYV,IAASU,YAsB3B,SAASC,IAOL,OACI,wBAAQC,QANa,WACrB,IAAMC,EAAW,IAAIb,IAASS,KAAKK,mBACnCL,EAAKM,gBAAgBF,IAIrB,iCAIR,SAASG,IACL,IAAMC,EAAaP,EAAUQ,WAAW,YAClCC,EAAQF,EAAWG,QAAQ,aAAaC,MAAM,IACpD,EAAmBC,YAAkBH,EAAO,CAACI,QAAS,OAA/CC,EAAP,oBACA,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACMC,EAAQC,sBAERC,EAAW,uCAAG,WAAMC,GAAN,qBAAAC,EAAA,6DAChBD,EAAEE,iBADc,EAIQxB,EAAKyB,YAAtBC,EAJS,EAITA,IAAKC,EAJI,EAIJA,SAJI,SAMVnB,EAAWoB,IAAI,CACjBC,KAAMZ,EACNa,UAAWvC,IAASU,UAAU8B,WAAWC,kBACzCN,MACAC,aAVY,OAchBT,EAAa,IAER,OAALC,QAAK,IAALA,GAAA,UAAAA,EAAOc,eAAP,SAAgBC,eAAe,CAACC,SAAU,WAhB1B,2CAAH,sDAqBjB,OACI,qCACI,iCACKpB,GAAYA,EAASqB,KAAI,SAAAC,GAAG,OAAI,cAACC,EAAD,CAA0BC,QAASF,GAAjBA,EAAIG,OACvD,qBAAKC,IAAKtB,OAId,uBAAMuB,SAAUrB,EAAhB,UACI,uBAAOsB,MAAO1B,EAAW2B,SAAU,SAACtB,GAAD,OAAOJ,EAAaI,EAAEuB,OAAOF,UAChE,wBAAQG,KAAM,SAAd,wBAOhB,SAASR,EAAYS,GAAuD,IAAD,EACvE,EAA8BA,EAAMR,QAA7BV,EAAP,EAAOA,KAAMH,EAAb,EAAaA,IAAKC,EAAlB,EAAkBA,SAEZqB,EAAetB,KAAG,OAAK1B,QAAL,IAAKA,GAAL,UAAKA,EAAMyB,mBAAX,aAAK,EAAmBC,KAAM,OAAS,WAE/D,OACI,sBAAKuB,UAAS,kBAAaD,GAA3B,UACI,qBAAKE,IAAKvB,IACV,4BAAIE,OAKhB,SAASsB,IACL,OAAOnD,EAAKyB,aACR,wBAAQtB,QAAS,kBAAMH,EAAKoD,WAA5B,sBAIOC,MAhGf,WAEI,MAAeC,YAAatD,GAArBuD,EAAP,oBAGA,OACI,sBAAKN,UAAU,MAAf,UACE,2BAGE,oCACKM,EAAO,cAAChD,EAAD,IAAc,cAACL,EAAD,IACtB,cAACiD,EAAD,WCvBDK,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4db96b4c.chunk.js","sourcesContent":["import React, {createRef, useRef, useState} from 'react';\nimport './App.css';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport {useCollectionData} from 'react-firebase-hooks/firestore'\nimport * as events from \"events\";\n\n\nfirebase.initializeApp({\n    apiKey: \"AIzaSyBmLLkjb7Yuw24Efm1r8C3qayxNqUZWqMA\",\n    authDomain: \"chat-app-29cc7.firebaseapp.com\",\n    projectId: \"chat-app-29cc7\",\n    storageBucket: \"chat-app-29cc7.appspot.com\",\n    messagingSenderId: \"511025175348\",\n    appId: \"1:511025175348:web:7ffeb00f97188cc29ee361\",\n    measurementId: \"G-VFWMWRLH6F\"\n});\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n\n    const [user] = useAuthState(auth);\n\n\n    return (\n        <div className=\"App\">\n          <header>\n\n          </header>\n            <section>\n                {user ? <ChatRoom/> : <SignIn />}\n                <SignOut />\n\n            </section>\n        </div>\n  );\n}\n\n\nfunction SignIn() {\n\n    const signInWithGoogle = () => {\n        const provider = new firebase.auth.GoogleAuthProvider();\n        auth.signInWithPopup(provider);\n    };\n\n    return (\n        <button onClick={signInWithGoogle}>Sign in with google</button>\n    )\n}\n\nfunction ChatRoom() {\n    const messageRef = firestore.collection('messages');\n    const query = messageRef.orderBy('createdAt').limit(25);\n    const [messages] = useCollectionData(query, {idField: 'id'});\n    const [formValue, setFormValue] = useState('');\n    const dummy = createRef<HTMLDivElement>();\n\n    const sendMessage = async(e: React.FormEvent) => {\n        e.preventDefault();\n\n        // @ts-ignore\n        const {uid, photoURL} = auth.currentUser;\n\n        await messageRef.add({\n            text: formValue,\n            createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n            uid,\n            photoURL\n        });\n\n        // Reset form\n        setFormValue('');\n\n        dummy?.current?.scrollIntoView({behavior: 'smooth'});\n    }\n\n\n\n    return (\n        <>\n            <main>\n                {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n                <div ref={dummy}>\n\n                </div>\n            </main>\n            <form onSubmit={sendMessage}>\n                <input value={formValue} onChange={(e) => setFormValue(e.target.value)}/>\n                <button type={\"submit\"}>Send</button>\n            </form>\n        </>\n    )\n}\n\n\nfunction ChatMessage(props: { message: firebase.firestore.DocumentData; }) {\n    const {text, uid, photoURL} = props.message;\n\n    const messageClass = uid === auth?.currentUser?.uid ? 'sent' : 'received';\n\n    return (\n        <div className={`message ${messageClass}`}>\n            <img src={photoURL}/>\n            <p>{text}</p>\n        </div>\n    )\n}\n\nfunction SignOut() {\n    return auth.currentUser && (\n        <button onClick={() => auth.signOut()}>Sign out</button>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}